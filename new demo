<div id="app">
    <div class="container">
      <nav class="navbar navbar-default">
        <div class="container-fluid">
          <!-- Brand and toggle get grouped for better mobile display -->
          <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">Brand</a>
          </div>

          <!-- Collect the nav links, forms, and other content for toggling -->
          <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
              <!-- 使用 router-link 组件来导航. -->
             <!-- 通过传入 `to` 属性指定链接. -->
             <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
              <li><router-link to="/home">Home</router-link></li>
              <li><router-link to="/list">List</router-link></li>
              <li><router-link to="/about">About</router-link></li>

            </ul>

          </div><!-- /.navbar-collapse -->
        </div><!-- /.container-fluid -->
      </nav>
    </div>
    <div class="container">
      <!-- 路由出口 -->
     <!-- 路由匹配到的组件将渲染在这里 -->
     <router-view></router-view>
    </div>
  </div>

  <script>
//1.定义路由组件

//创建子组件，相当于路径对应的子页面

//创建组件 Home
var Home = {
  template:`<div class="jumbotron">
              <h1>Hello, world!{{msg}}</h1>
              <p>...</p>
              <p><a class="btn btn-primary btn-lg" href="#" role="button">Learn more</a></p>
            </div>`,
  data:function(){
    return {
      msg: 'hello vue router!'
    }
  }
}

//创建组件 List
var List = {
  template:`<ul class="list-group">
              <li class="list-group-item" v-for="item in msg">{{item.title}}</li>
            </ul>`,
  data:function(){
    return {
      msg:[
        {title:'Cras justo odio'},
        {title:'Dapibus ac facilisis in'},
        {title:'Morbi leo risus'},
        {title:'Porta ac consectetur ac'},
        {title:'Vestibulum at eros'}
      ]
    }
  }
}

//创建组件About
var About = {
  template : `<div class="page-header">
              <h1>Example page header <small>Subtext for header</small></h1>
            </div>`
}


// 2. 定义路由
// 每个路由应该映射一个组件。 其中"component" 可以是
// 通过 Vue.extend() 创建的组件构造器，
// 或者，只是一个组件配置对象。
const routes = [
  {path:'/home',component:Home},
  {path:'/list',component:List},
  {path:'/about',component:About},
]

// 3. 创建 router 实例，然后传 `routes` 配置
// 你还可以传别的配置参数, 不过先这么简单着吧。
const router = new VueRouter({
  routes
})


// 4. 创建和挂载根实例。
// 记得要通过 router 配置参数注入路由，
// 从而让整个应用都有路由功能
    var vm = new Vue({
        router
    }).$mount('#app');
// 现在，应用已经启动了！

  </script>
